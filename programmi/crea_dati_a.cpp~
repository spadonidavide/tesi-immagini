#include <iostream>
#include <time.h> 
#include<stdlib.h>
#include <list>
#include <utility>
#include <fstream>
#include <algorithm>

using namespace std;

const int sup = 1;
const int inf = -sup;

class linea {
	private:
		int r;
		int g;
		int b;
		
		int rp;
		int gp;
		int bp;
		
	public:
		linea(int r, int g, int b, int rp, int gp, int bp){
			this->r = r;
			this->g = g;
			this->b = b;
			this->rp = rp;
			this->gp = gp;
			this->bp = bp;
		}
		
		int get_r(){
			return r;
		}
		
		int get_g(){
			return g;
		}
		
		int get_b(){
			return b;
		}
		
		int get_rp(){
			return rp;
		}
		
		int get_gp(){
			return gp;
		}
		
		int get_bp(){
			return bp;
		}
		
		void print() {
			cout << "R:"<<r<<" G:"<<g<<" B:"<<b<< " Rp:"<<rp<<" Gp:"<<gp<<" Bp:"<<bp<<endl;
		}
		
		
		bool confronta_diff(linea l, int dif) {
		
			if ( (r - l.get_r()) < -dif || (r - l.get_r()) > dif) {
				
				return false;
			}
			if (( g - l.get_g()) < -dif || (g - l.get_g()) > dif) {
				
				return false;
			}
			if ( (b - l.get_b()) < -dif || (b - l.get_b()) > dif) {
				
				return false;
			}
			if ( (rp - l.get_rp()) < -dif || (rp - l.get_rp()) > dif) {
				
				return false;
			}
			if ( (gp - l.get_gp()) < -dif || (gp - l.get_gp()) > dif) {
				
				return false;
			}
			if ( (bp - l.get_bp()) < -dif || (bp - l.get_bp()) > dif) {
				
				return false;
			}
			
			
			return true;
			
		}
		/*
		bool operator==(linea l) {
			return confronta_diff(l);
		}*/
		
		
};


class immagine {
	private:
		list<linea> lines;
		
	public:
		void add_linea(linea l) {
			lines.push_front(l);
		}
		
		list<linea> get_lines(){
			return lines;
		}
		
		bool confronta(immagine im) {
			list<linea> l2 = im.get_lines();
			for(list<linea>::iterator it=l2.begin(); it!=l2.end(); ++it){
				
			}
			
			return true;
		}
};


bool comparatore(list<linea> l1, list<linea> l2) {
	return l1.size()>l2.size();
}


class nodo{
public:
	list<linea>::iterator rapp;
	list<linea> lista;
	nodo *next;
	int diff;
};


int main() {

	ofstream f_linee;
	f_linee.open("linee.txt");	
	
	list<linea> contenitori;
	
	list< list<linea> > insiemi;

	for(int i=0; i<10000;++i){
		int r,g,b,rp,gp,bp;
		
		r = rand() % 16;
		g = rand() % 16;
		b = rand() % 16;
		rp = rand() % 16;
		gp = rand() % 16;
		bp = rand() % 16;
		
		
		linea nuova = linea(r,g,b,rp,gp,bp);
		
		contenitori.push_front(nuova);
	}
	
	
	list<nodo> nodi;
	

	while(contenitori.size() > 0) {
		linea l1 = *contenitori.begin();
		contenitori.pop_front();
		
		list< linea > lapp;
		lapp.push_front(l1);
		
		list<linea>::iterator jt=contenitori.begin(); 
		while(jt!=contenitori.end()) {
			linea l2 = *jt;
			if (l1.confronta_diff(l2, 2)) {
			 	lapp.push_back(l2);
			 	jt = contenitori.erase(jt);
			 	
			 	cout << contenitori.size() << endl;
			}
			
			jt++;
		
		}
		
		insiemi.push_front(lapp);
		
	}
	
	for(list<list<linea> >::iterator it=insiemi.begin(); it!=insiemi.end(); ++it) {
		list<linea> c = *it;
		list<linea>::iterator first = c.begin(); 
		c.pop_front();
		
		nodo n;
		n.rapp = first;
		n.diff = 2;	
		n.lista =  c;
		
		nodi.push_front(n);
	}
	
	for(list<nodo>::iterator it=nodi.begin(); it!=nodi.end(); ++it) {
		nodo n = *it;
		list<linea> l = n.lista;
		
		nodo nuovo;
		
		for(list<linea>::iterator jt=l.begin(); jt!=l.end(); ++jt) {
			linea l2 = *jt;
			if (l1.confronta_diff(l2, 1)) {
			 	//lapp.push_back(l2);
			 	jt = contenitori.erase(jt);
			 	
			 	nuovo.lista.push_back(l2);
			 	
			 	cout << contenitori.size() << endl;
			}
		}
		
		n.next = *nuovo;
	}
	
	
	
	/*
	while(contenitori.size() > 0) {
		linea l1 = *contenitori.begin();
		contenitori.pop_front();
		
		list< linea > lapp;
		lapp.push_front(l1);
		
		list<linea>::iterator jt=contenitori.begin(); 
		while(jt!=contenitori.end()) {
			linea l2 = *jt;
			if (l1.confronta_diff(l2)) {
			 	lapp.push_back(l2);
			 	jt = contenitori.erase(jt);
			 	
			 	cout << contenitori.size() << endl;
			}
			
			jt++;
		
		}
		
		insiemi.push_front(lapp);
		
	}
	
	insiemi.sort(comparatore);
	
	/*
	int c_liste[500];
	
	for(int i=0; i<500; ++i) {
		c_liste[i] = 0;
	}*/
	
	for(list<list<linea> >::iterator it=insiemi.begin(); it!=insiemi.end(); ++it) {
		list<linea> c = *it;		
		
		//c_liste[c.size()]++;
		
		
		if (c.size()==5){
			cout<<"------------------insieme di contenitori-----------------"<<endl;
			for(list<linea >::iterator jt=c.begin(); jt!=c.end(); ++jt) {
				linea l = *jt;
				l.print();
			}
		}
		
	}
	/*
	for(int i=0; i<10; ++i)
		cout<<c_liste[i]<<" di cardinalita "<<i<<endl;*/
	
	
	//salvo su file
	for(list<list<linea> >::iterator it=insiemi.begin(); it!=insiemi.end(); ++it) {
		list<linea> c = *it;
		
		list<linea>::iterator end = c.end();
		end--;
		
		for(list<linea>::iterator ij=c.begin(); ij!=c.end(); ij++) {
			linea l = *ij;
			f_linee<< l.get_r() <<"\n"<< l.get_g()<<"\n"  << l.get_b()<<"\n"
			 << l.get_rp()<<"\n"  << l.get_gp()<<"\n" << l.get_bp()<<"\n";
			
			if (ij == end){
				f_linee<<"\n";
			}
			
		 }
		
	}
	
	f_linee.close();
		
}







