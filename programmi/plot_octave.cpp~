#ifndef iostream
	#include <iostream>
#endif
#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/toplev.h>
#include <unistd.h>

using namespace std;

void pausa(int t){
	octave_value_list functionArguments;
	functionArguments(0) = t;
	const octave_value_list result1 = feval ("stop", functionArguments, 1);
}

void hold(){
	octave_value_list functionArguments;
	const octave_value_list result1 = feval ("h_on", functionArguments, 1);
}

std::string exec(const char* cmd) {
    FILE* pipe = popen(cmd, "r");
    if (!pipe) return "ERROR";
    char buffer[128];
    std::string result = "";
    while (!feof(pipe)) {
        if (fgets(buffer, 128, pipe) != NULL)
            result += buffer;
    }
    pclose(pipe);
    return result;
}
  
  
void plot_rast(const vector<int> &x, const vector<int> &y, const vector<int> &z) {
	
	
	const char *argvv [] = {"", "--silent"};
	
	octave_main (2, (char **) argvv, true);
	
	octave_value_list functionArguments;
	Matrix v_x(1, x.size());
	Matrix v_y(1, y.size());
	Matrix v_z(1, z.size());
	
	for(int i=0; i<x.size(); ++i){
		v_x(0,i) = x[i];
	}
	
	for(int i=0; i<y.size(); ++i){
		v_y(0,i) = y[i];
	}
	
	for(int i=0; i<z.size(); ++i){
		v_z(0,i) = z[i];
	}
	
	functionArguments(0) = v_x;
	functionArguments(1) = v_y;
	functionArguments(2) = v_z;
	
	const octave_value_list result = feval ("plot_rast", functionArguments, 1);
}

void plot_rast_red(const vector<int> &x, const vector<int> &y, const vector<int> &z) {
	
	
	const char *argvv [] = {"", "--silent"};
	
	octave_main (2, (char **) argvv, true);
	
	octave_value_list functionArguments;
	Matrix v_x(1, x.size());
	Matrix v_y(1, y.size());
	Matrix v_z(1, z.size());
	
	for(int i=0; i<x.size(); ++i){
		v_x(0,i) = x[i];
	}
	
	for(int i=0; i<y.size(); ++i){
		v_y(0,i) = y[i];
	}
	
	for(int i=0; i<z.size(); ++i){
		v_z(0,i) = z[i];
	}
	
	functionArguments(0) = v_x;
	functionArguments(1) = v_y;
	functionArguments(2) = v_z;
	
	const octave_value_list result = feval ("plot_rast", functionArguments, 1);
}

/*
int main() {

	
	static const int x[]={1,2,3,4,5,6};
	static const int y[]={1,2,3,4,5,6};
	static const int z[]={1,2,3,4,5,6};
	vector<int> x_v (x, x + sizeof(x) / sizeof(x[0]) );
	vector<int> y_v (y, y + sizeof(y) / sizeof(y[0]) );
	vector<int> z_v (z, z + sizeof(z) / sizeof(z[0]) );
	
	plot_rast(x_v,y_v,z_v);
	hold();
	
	static const int xp[]={10,20,30,40,50,60};
	static const int yp[]={10,20,30,40,50,60};
	static const int zp[]={10,20,30,40,50,60};
	vector<int> x_vp (xp, xp + sizeof(xp) / sizeof(xp[0]) );
	vector<int> y_vp (yp, yp + sizeof(yp) / sizeof(yp[0]) );
	vector<int> z_vp (zp, zp + sizeof(zp) / sizeof(zp[0]) );
	
	plot_rast(x_vp,y_vp,z_vp);
	
	pausa(2);
	return 0;
}*/





