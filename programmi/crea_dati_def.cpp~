#include <iostream>
#include <time.h> 
#include<stdlib.h>
#include <vector>
#include <list>
#include <utility>
#include <fstream>
#include <algorithm>

using namespace std;

const int sup = 1;
const int inf = -sup;


class linea {
	private:
		int r;
		int g;
		int b;
		
		int rp;
		int gp;
		int bp;
		
		
	public:
		linea(int r, int g, int b, int rp, int gp, int bp){
			this->r = r;
			this->g = g;
			this->b = b;
			this->rp = rp;
			this->gp = gp;
			this->bp = bp;
		}
		
		int get_r(){
			return r;
		}
		
		int get_g(){
			return g;
		}
		
		int get_b(){
			return b;
		}
		
		int get_rp(){
			return rp;
		}
		
		int get_gp(){
			return gp;
		}
		
		int get_bp(){
			return bp;
		}
		
		void print() {
			cout << "R:"<<r<<" G:"<<g<<" B:"<<b<< " Rp:"<<rp<<" Gp:"<<gp<<" Bp:"<<bp<<endl;
		}
		
		
		bool confronta_diff(linea l) {
		
			if ( (r - l.get_r()) < inf || (r - l.get_r()) > sup) {
				
				return false;
			}
			if (( g - l.get_g()) < inf || (g - l.get_g()) > sup) {
				
				return false;
			}
			if ( (b - l.get_b()) < inf || (b - l.get_b()) > sup) {
				
				return false;
			}
			if ( (rp - l.get_rp()) < inf || (rp - l.get_rp()) > sup) {
				
				return false;
			}
			if ( (gp - l.get_gp()) < inf || (gp - l.get_gp()) > sup) {
				
				return false;
			}
			if ( (bp - l.get_bp()) < inf || (bp - l.get_bp()) > sup) {
				
				return false;
			}
			
			
			return true;
			
		}
		
		bool operator==(linea l) {
			return confronta_diff(l);
		}
		
		
};


class immagine {
	private:
		list<linea> lines;
		
	public:
		void add_linea(linea l) {
			lines.push_front(l);
		}
		
		list<linea> get_lines(){
			return lines;
		}
		
		bool confronta(immagine im) {
			list<linea> l2 = im.get_lines();
			for(list<linea>::iterator it=l2.begin(); it!=l2.end(); ++it){
				if(find(lines.begin(), lines.end(), *it)==lines.end())
					return false;
			}
			
			return true;
		}
};


bool comparatore(list<linea> l1, list<linea> l2) {
	return l1.size()>l2.size();
}

int pow(int base, int esponente) {
	int result = base;
	for(int i=0; i<esponente; ++i) {
		result = result * base;
	}
	
	return result;
}


int main() {
	linea l(0,0,0,0,0,0);
	int dim = pow(16,6);
	
	vector<linea> linee;
	
	cout<<pow(16,6)<<endl;
	
	for(int j=0; j<16; ++j)
		for(int i=0; i<pow(16,5); ++i) {
			linee.push_back(l);
		
		}
		cout<<"fine"<<endl;
	}
	
	
	
	

	for(int i=0; i<20;++i){
		int r,g,b,rp,gp,bp;
		
		r = rand() % 16;
		g = rand() % 16;
		b = rand() % 16;
		rp = rand() % 16;
		gp = rand() % 16;
		bp = rand() % 16;
		
		int indice = r + g * 16 + b * pow(16, 2) + rp * pow(16, 3) + gp * pow(16, 4) + bp * pow(16, 5);
		
		linea nuova = linea(r, g, b, rp, gp, bp);
		
		//cout<<indice<<endl;
		
		//linee[indice] = nuova;
		
		
	}
	
	
	
		
}







